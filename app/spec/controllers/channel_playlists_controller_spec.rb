require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ChannelPlaylistsController do

  login_admin

  describe "GET index" do
    it "assigns all channel_playlists as @channel_playlists" do
      channel_playlist = create(:channel_playlist)
      get :index, {}
      assigns(:channel_playlists).should eq([channel_playlist])
    end
  end

  describe "GET show" do
    it "assigns the requested channel_playlist as @channel_playlist" do
      channel_playlist = create(:channel_playlist)
      get :show, {:id => channel_playlist.to_param}
      assigns(:channel_playlist).should eq(channel_playlist)
    end
  end

  describe "GET new" do
    it "assigns a new channel_playlist as @channel_playlist" do
      get :new, {}
      assigns(:channel_playlist).should be_a_new(ChannelPlaylist)
    end
  end

  describe "GET edit" do
    it "assigns the requested channel_playlist as @channel_playlist" do
      channel_playlist = create(:channel_playlist)
      get :edit, {:id => channel_playlist.to_param}
      assigns(:channel_playlist).should eq(channel_playlist)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new ChannelPlaylist" do
        expect {
          post :create, {:channel_playlist => attributes_for(:channel_playlist)}
        }.to change(ChannelPlaylist, :count).by(1)
      end

      it "assigns a newly created channel_playlist as @channel_playlist" do
        post :create, {:channel_playlist => attributes_for(:channel_playlist)}
        assigns(:channel_playlist).should be_a(ChannelPlaylist)
        assigns(:channel_playlist).should be_persisted
      end

      it "redirects to the created channel_playlist" do
        post :create, {:channel_playlist => attributes_for(:channel_playlist)}
        response.should redirect_to(ChannelPlaylist.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved channel_playlist as @channel_playlist" do
        # Trigger the behavior that occurs when invalid params are submitted
        ChannelPlaylist.any_instance.stub(:save).and_return(false)
        post :create, {:channel_playlist => { "author" => "" }}
        assigns(:channel_playlist).should be_a_new(ChannelPlaylist)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        ChannelPlaylist.any_instance.stub(:save).and_return(false)
        post :create, {:channel_playlist => { "author" => "" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested channel_playlist" do
        channel_playlist = create(:channel_playlist)
        # Assuming there are no other channel_playlists in the database, this
        # specifies that the ChannelPlaylist created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ChannelPlaylist.any_instance.should_receive(:update).with({ "author" => "MyString" })
        put :update, {:id => channel_playlist.to_param, :channel_playlist => { "author" => "MyString" }}
      end

      it "assigns the requested channel_playlist as @channel_playlist" do
        channel_playlist = create(:channel_playlist)
        put :update, {:id => channel_playlist.to_param, :channel_playlist => attributes_for(:channel_playlist)}
        assigns(:channel_playlist).should eq(channel_playlist)
      end

      it "redirects to the channel_playlist" do
        channel_playlist = create(:channel_playlist)
        put :update, {:id => channel_playlist.to_param, :channel_playlist => attributes_for(:channel_playlist)}
        response.should redirect_to(channel_playlist)
      end
    end

    describe "with invalid params" do
      it "assigns the channel_playlist as @channel_playlist" do
        channel_playlist = create(:channel_playlist)
        # Trigger the behavior that occurs when invalid params are submitted
        ChannelPlaylist.any_instance.stub(:save).and_return(false)
        put :update, {:id => channel_playlist.to_param, :channel_playlist => { "author" => "" }}
        assigns(:channel_playlist).should eq(channel_playlist)
      end

      it "re-renders the 'edit' template" do
        channel_playlist = create(:channel_playlist)
        # Trigger the behavior that occurs when invalid params are submitted
        ChannelPlaylist.any_instance.stub(:save).and_return(false)
        put :update, {:id => channel_playlist.to_param, :channel_playlist => { "author" => "" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested channel_playlist" do
      channel_playlist = create(:channel_playlist)
      expect {
        delete :destroy, {:id => channel_playlist.to_param}
      }.to change(ChannelPlaylist, :count).by(-1)
    end

    it "redirects to the channel_playlists list" do
      channel_playlist = create(:channel_playlist)
      delete :destroy, {:id => channel_playlist.to_param}
      response.should redirect_to(channel_playlists_url)
    end
  end

end
