require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe JinglesController do

  login_admin

  describe "GET index" do
    it "assigns all jingles as @jingles" do
      jingle = create(:jingle)
      get :index, {}
      assigns(:jingles).should eq([jingle])
    end
  end

  describe "GET show" do
    it "assigns the requested jingle as @jingle" do
      jingle = create(:jingle)
      get :show, {:id => jingle.to_param}
      assigns(:jingle).should eq(jingle)
    end
  end

  describe "GET new" do
    it "assigns a new jingle as @jingle" do
      get :new, {}
      assigns(:jingle).should be_a_new(Jingle)
    end
  end

  describe "GET edit" do
    it "assigns the requested jingle as @jingle" do
      jingle = create(:jingle)
      get :edit, {:id => jingle.to_param}
      assigns(:jingle).should eq(jingle)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Jingle" do
        expect {
          post :create, {:jingle => attributes_for(:jingle)}
        }.to change(Jingle, :count).by(1)
      end

      it "assigns a newly created jingle as @jingle" do
        post :create, {:jingle => attributes_for(:jingle)}
        assigns(:jingle).should be_a(Jingle)
        assigns(:jingle).should be_persisted
      end

      it "redirects to the created jingle" do
        post :create, {:jingle => attributes_for(:jingle)}
        response.should redirect_to(Jingle.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved jingle as @jingle" do
        # Trigger the behavior that occurs when invalid params are submitted
        Jingle.any_instance.stub(:save).and_return(false)
        post :create, {:jingle => { "title" => "" }}
        assigns(:jingle).should be_a_new(Jingle)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Jingle.any_instance.stub(:save).and_return(false)
        post :create, {:jingle => { "title" => "" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested jingle" do
        jingle = create(:jingle)
        # Assuming there are no other jingles in the database, this
        # specifies that the Jingle created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Jingle.any_instance.should_receive(:update).with({ "title" => "MyString" })
        put :update, {:id => jingle.to_param, :jingle => { "title" => "MyString" }}
      end

      it "assigns the requested jingle as @jingle" do
        jingle = create(:jingle)
        put :update, {:id => jingle.to_param, :jingle => attributes_for(:jingle)}
        assigns(:jingle).should eq(jingle)
      end

      it "redirects to the jingle" do
        jingle = create(:jingle)
        put :update, {:id => jingle.to_param, :jingle => attributes_for(:jingle)}
        response.should redirect_to(jingle)
      end
    end

    describe "with invalid params" do
      it "assigns the jingle as @jingle" do
        jingle = create(:jingle)
        # Trigger the behavior that occurs when invalid params are submitted
        Jingle.any_instance.stub(:save).and_return(false)
        put :update, {:id => jingle.to_param, :jingle => { "title" => "" }}
        assigns(:jingle).should eq(jingle)
      end

      it "re-renders the 'edit' template" do
        jingle = create(:jingle)
        # Trigger the behavior that occurs when invalid params are submitted
        Jingle.any_instance.stub(:save).and_return(false)
        put :update, {:id => jingle.to_param, :jingle => { "title" => "" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested jingle" do
      jingle = create(:jingle)
      expect {
        delete :destroy, {:id => jingle.to_param}
      }.to change(Jingle, :count).by(-1)
    end

    it "redirects to the jingles list" do
      jingle = create(:jingle)
      delete :destroy, {:id => jingle.to_param}
      response.should redirect_to(jingles_url)
    end

    it "does not destroy the jingle if it is in playlist entry that is in danger zone" do
      Timecop.freeze
      playlist_entry = create(:playlist_entry_jingle, start_time: Time.zone.now)
      expect(playlist_entry.isInDangerZone?).to be true
      expect {
        delete :destroy, {:id => playlist_entry.jingle.to_param}
      }.not_to change(Jingle, :count).by(-1)
    end
  end

end
